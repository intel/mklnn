CMAKE_MINIMUM_REQUIRED(VERSION 2.6 FATAL_ERROR)
CMAKE_POLICY(VERSION 2.6)
SET(MKLNN_INSTALL_LIB_SUBDIR "${Torch_INSTALL_LUA_CPATH_SUBDIR}")
SET(MKLNN_INSTALL_INCLUDE_SUBDIR "${Torch_INSTALL_INCLUDE_SUBDIR}")

IF(LUAROCKS_PREFIX)
  MESSAGE(STATUS "Installing Torch-mklnn through Luarocks")
  STRING(REGEX REPLACE "(.*)lib/luarocks/rocks.*" "\\1" CMAKE_INSTALL_PREFIX  "${LUAROCKS_PREFIX}")
  MESSAGE(STATUS "Prefix inferred from Luarocks: ${CMAKE_INSTALL_PREFIX}")
ENDIF()
SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})

IF(NOT Torch_FOUND)
  FIND_PACKAGE(Torch REQUIRED)
ENDIF()
#FIND_PACKAGE(Torch REQUIRED)
#FIND_PACKAGE(MKLML REQUIRED)
IF(NOT MKLTorch_FOUND)
  FIND_PACKAGE(MKLTorch REQUIRED)
ENDIF()

IF(NOT MKLTH_LIBRARIES)
  SET(MKLTH_LIBRARIES "mkltorch")
ENDIF(NOT MKLTH_LIBRARIES)
MESSAGE(STATUS "MKLTH_LIBRARIES: ${MKLTH_LIBRARIES}")

IF(NOT MKLNN_INSTALL_LIB_SUBDIR)
  SET(MKLNN_INSTALL_LIB_SUBDIR "lib" CACHE PATH "MKLNN install library directory")
  SET(MKLNN_INSTALL_INCLUDE_SUBDIR "include" CACHE PATH "MKLNN install include subdirectory")
ENDIF()

# Flags
# When using MSVC
IF(MSVC)
  # we want to respect the standard, and we are bored of those **** .
  ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE=1)
  ADD_DEFINITIONS(-DTH_EXPORTS)
ENDIF(MSVC)

IF (CMAKE_VERSION VERSION_LESS "3.1")
  SET(CMAKE_C_FLAGS "-std=c99 ${CMAKE_C_FLAGS}")
ELSE ()
  SET(CMAKE_C_STANDARD 99)
ENDIF ()

# OpenMP support?
SET(WITH_OPENMP ON CACHE BOOL "OpenMP support if available?")
IF (APPLE AND CMAKE_COMPILER_IS_GNUCC)
  EXEC_PROGRAM (uname ARGS -v  OUTPUT_VARIABLE DARWIN_VERSION)
  STRING (REGEX MATCH "[0-9]+" DARWIN_VERSION ${DARWIN_VERSION})
  MESSAGE (STATUS "MAC OS Darwin Version: ${DARWIN_VERSION}")
  IF (DARWIN_VERSION GREATER 9)
    SET(APPLE_OPENMP_SUCKS 1)
  ENDIF (DARWIN_VERSION GREATER 9)
  EXECUTE_PROCESS (COMMAND ${CMAKE_C_COMPILER} -dumpversion
    OUTPUT_VARIABLE GCC_VERSION)
  IF (APPLE_OPENMP_SUCKS AND GCC_VERSION VERSION_LESS 4.6.2)
    MESSAGE(STATUS "Warning: Disabling OpenMP (unstable with this version of GCC)")
    MESSAGE(STATUS " Install GCC >= 4.6.2 or change your OS to enable OpenMP")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-unknown-pragmas")
    SET(WITH_OPENMP OFF CACHE BOOL "OpenMP support if available?" FORCE)
  ENDIF ()
ENDIF ()

IF (WITH_OPENMP)
  FIND_PACKAGE(OpenMP)
  IF(OPENMP_FOUND)
    MESSAGE(STATUS "Compiling with OpenMP support")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
  ENDIF(OPENMP_FOUND)
ENDIF (WITH_OPENMP)

SET(AVX512F_C_FLAGS "-mavx512f")
SET(AVX512F_CXX_FLAGS "-mavx512f")
IF("${CMAKE_C_COMPILER_ID}" STREQUAL "Intel")
  MESSAGE(STATUS "${CMAKE_C_COMPILER_ID} usings Intel ")
  SET(AVX512F_C_FLAGS "-xCOMMON-AVX512")
ENDIF()

IF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
  MESSAGE(STATUS "${CMAKE_CXX_COMPILER_ID} usings Intel ")
  SET(AVX512F_CXX_FLAGS "-xCOMMON-AVX512")
ENDIF()

IF(FORCE_AVX512)
    SET(CMAKE_C_FLAGS "${AVX512F_C_FLAGS} ${CMAKE_C_FLAGS}")
    SET(CMAKE_CXX_FLAGS "${AVX512F_CXX_FLAGS} ${CMAKE_CXX_FLAGS}")
ENDIF(FORCE_AVX512)


INCLUDE_DIRECTORIES("${Torch_INSTALL_INCLUDE} ${MKLTorch_INSTALL_INCLUDE}")
LINK_DIRECTORIES("${MKLTorch_INSTALL_LIB}")

#FILE(GLOB luasrc ./*.lua)
SET(src  init.c)
ADD_LIBRARY(mklnn MODULE init.c)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})
### Torch packages supposes libraries prefix is "lib"
SET_TARGET_PROPERTIES(mklnn PROPERTIES
  PREFIX "lib"
  IMPORT_PREFIX "lib")

TARGET_LINK_LIBRARIES(mklnn ${MKLTH_LIBRARIES})
INSTALL(TARGETS mklnn LIBRARY DESTINATION ${MKLNN_INSTALL_LIB_SUBDIR})

#MESSAGE(STATUS "src =" "${src}")
#ADD_TORCH_PACKAGE(mklnn "${src}" "${luasrc}" "Intel MKLNN")
#TARGET_LINK_LIBRARIES(mklnn ${MKLTorch_LIBRARIES})
